Delegate


1)Holds the reference to a method
2)The reference to a method can be changed at runtime
3)Derived from the System.Delegate
4)Syntax
<access_specifier> delegate <return_type> <delegate_name> (<parameter_list>)
5)Multicast deligate
Delegate objects can be composed using the "+" operator
6)Pass Delegate as a Parameter
A method can have a parameter of a delegate type and can invoke the delegate parameter.
7)Delegates can be invoke like a normal function or using Invoke() method.
8)Encapsulating the method's call from caller
9)Improves the performance of application
10)Delegates can be used without parameters or with parameter list


Lambda Expression


1)Anonymous functions are created.
2)Lambda expressions use the lambda operator =>, that can be read as “goes to” or “becomes”. 
3)The lambda operator => divides a lambda expression into two parts. The left side is the input parameter and the right side is the lambda body.
4)Usually lambda expressions are used as predicates or instead of delegates (a type that references a method).